AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  ProjectName:
    Type: String
  Domain:
    Type: String
  Environment:
    Type: String

Conditions:
  IsTest: !Equals [!Ref Environment, test]

Resources:
  Operator:
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref ProjectName
      Policies:
        - PolicyName: !Join ['', [!Ref ProjectName, 'InvalidateDistribution']]
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudfront:CreateInvalidation'
                Resource:
                  - !Join ['', ['arn:aws:cloudfront::', !Ref 'AWS::AccountId', ':distribution/', !Ref CDN]]

  OperatorAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref Operator

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Join [' ', ['CloudFront OAI for', !Ref WebsiteBucket]]

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['.', [app, !Ref Domain]]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId
            Effect: Allow
            Action:
              - 's3:GetObject'
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref WebsiteBucket, '/*']]
          - Principal:
              AWS: !GetAtt Operator.Arn
            Effect: Allow
            Action:
              - 's3:ListBucket'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref WebsiteBucket]]
              - !Join ['', ['arn:aws:s3:::', !Ref WebsiteBucket, '/*']]

  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref WebsiteBucket
      ValidationMethod: DNS

  CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Join ['.', [!Ref WebsiteBucket, 's3.amazonaws.com']]
            Id: !Join ['.', ['s3', 'origin', !Ref WebsiteBucket]]
            S3OriginConfig:
              OriginAccessIdentity: !Join ['/', ['origin-access-identity', 'cloudfront', !Ref OriginAccessIdentity]]
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          TargetOriginId: !Join ['.', ['s3', 'origin', !Ref WebsiteBucket]]
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        Aliases:
          - !Ref WebsiteBucket
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2018
        DefaultRootObject: index.html
        IPV6Enabled: false
        Enabled: true

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: IsTest
    Properties:
      HostedZoneName: transadmin.co.
      Name: !Join ['', [!Ref WebsiteBucket, '.']]
      Type: A
      AliasTarget:
        DNSName: !GetAtt CDN.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

Outputs:
  OperatorAccessKey:
    Value: !Ref OperatorAccessKey
  OperatorSecretKey:
    Value: !GetAtt OperatorAccessKey.SecretAccessKey
  DistributionId:
    Value: !Ref CDN
  DistributionDomainName:
    Value: !GetAtt CDN.DomainName
