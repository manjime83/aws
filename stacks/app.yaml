AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ProjectName:
    Type: String
  EnvType:
    Type: String
  Domain:
    Type: String

Conditions:
  IsProd: !Equals [!Ref EnvType, prod]

Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [".", [app, !Ref Domain]]
      PublicAccessBlockConfiguration: !If
        - IsProd
        - BlockPublicAcls: true
          IgnorePublicAcls: true
          BlockPublicPolicy: true
          RestrictPublicBuckets: true
        - !Ref "AWS::NoValue"
      WebsiteConfiguration: !If
        - IsProd
        - !Ref "AWS::NoValue"
        - IndexDocument: index.html

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Condition: IsProd
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Join [" ", ["CloudFront OAI for", !Ref WebsiteBucket]]

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          # - Principal:
          #     AWS: !GetAtt Operator.Arn
          #   Effect: Allow
          #   Action:
          #     - "s3:ListBucket"
          #     - "s3:PutObject"
          #     - "s3:DeleteObject"
          #   Resource:
          #     - !Join ["", ["arn:aws:s3:::", !Ref WebsiteBucket]]
          #     - !Join ["", ["arn:aws:s3:::", !Ref WebsiteBucket, "/*"]]
          - Principal: !If
              - IsProd
              - CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId
              - AWS: "*"
            Effect: Allow
            Action:
              - "s3:GetObject"
            Resource:
              - !Join ["", ["arn:aws:s3:::", !Ref WebsiteBucket, "/*"]]
  # Operator:
  #   Type: AWS::IAM::User
  #   Properties:
  #     UserName: !Join ["-", [!Ref ProjectName, !Ref Environment]]
  #     Policies:
  #       - PolicyName: !Join ["", [!Ref ProjectName, "InvalidateDistribution"]]
  #         PolicyDocument:
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - "cloudfront:CreateInvalidation"
  #               Resource:
  #                 - !Join ["", ["arn:aws:cloudfront::", !Ref "AWS::AccountId", ":distribution/", !Ref CDN]]
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: IsProd
    Properties:
      DomainName: !Ref WebsiteBucket
      ValidationMethod: DNS

  CDN:
    Type: AWS::CloudFront::Distribution
    Condition: IsProd
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Join [".", [!Ref WebsiteBucket, "s3.amazonaws.com"]]
            Id: !Join [".", ["s3", "origin"]]
            S3OriginConfig:
              OriginAccessIdentity: !Join ["/", ["origin-access-identity", "cloudfront", !Ref OriginAccessIdentity]]
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          TargetOriginId: !Join [".", ["s3", "origin"]]
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        Aliases:
          - !Ref WebsiteBucket
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2018
        DefaultRootObject: index.html
        IPV6Enabled: false
        Enabled: true

  DNSRecord: # deleteme
    Type: AWS::Route53::RecordSet
    Condition: IsProd
    Properties:
      HostedZoneName: transadmin.co.
      Name: !Join ["", [!Ref WebsiteBucket, "."]]
      Type: A
      AliasTarget:
        DNSName: !GetAtt CDN.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

Outputs:
  WebsiteURL:
    Value: !If
      - IsProd
      - !Join ["", ["https://", !GetAtt CDN.DomainName]]
      - !GetAtt WebsiteBucket.WebsiteURL
