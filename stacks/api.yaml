AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ProjectName:
    Type: String
  EnvType:
    Type: String
  Domain:
    Type: String
  VPC:
    Type: AWS::EC2::VPC::Id
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
  OperatorsGroup:
    Type: String
  SSLCertificate:
    Type: String

Conditions:
  IsProd: !Equals [!Ref EnvType, prod]

Resources:
  BackendRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${ProjectName}-${EnvType}/backend"
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "imageCountMoreThan",
                  "countNumber": 10,
                  "tagStatus": "untagged"
                },
                "description": "Keep only 10 untagged image, expire all others",
                "rulePriority": 1
              }
            ]
          }

  APIRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${ProjectName}-${EnvType}/api"
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "imageCountMoreThan",
                  "countNumber": 10,
                  "tagStatus": "untagged"
                },
                "description": "Keep only 10 untagged image, expire all others",
                "rulePriority": 1
              }
            ]
          }

  PutImagePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join ["-", [!Ref ProjectName, put, image]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - ecr:GetAuthorizationToken
            Resource:
              - "*"
          - Effect: "Allow"
            Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
            Resource:
              - !GetAtt BackendRepository.Arn
              - !GetAtt APIRepository.Arn
      Groups:
        - !Ref OperatorsGroup

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ProjectName}-${EnvType}"
      RetentionInDays: 7

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref ProjectName, !Ref EnvType, execution]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Effect: Allow
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref ProjectName, !Ref EnvType, task]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Effect: Allow
            Action: sts:AssumeRole

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ["-", [!Ref ProjectName, !Ref EnvType, task, definition]]
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      Cpu: "512"
      Memory: "1024"
      ContainerDefinitions:
        - Name: !Join ["-", [!Ref ProjectName, backend]]
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${BackendRepository}:latest"
          PortMappings:
            - ContainerPort: 8080
          Environment:
            - Name: NODE_ENV
              Value: !If [IsProd, production, !Ref EnvType]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: backend
        - Name: !Join ["-", [!Ref ProjectName, api]]
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${APIRepository}:latest"
          DependsOn:
            - ContainerName: !Join ["-", [!Ref ProjectName, backend]]
              Condition: START
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: !If [IsProd, production, !Ref EnvType]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: api

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!Ref ProjectName, !Ref EnvType, loadbalancer]]
      GroupDescription: !Sub "SecurityGroup for ${ProjectName}-${EnvType} LoadBalancer"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !If [IsProd, 443, 80]
          ToPort: !If [IsProd, 443, 80]
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref ProjectName, !Ref EnvType, loadbalancer]]

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: IsProd
    Properties:
      Name: !Join ["-", [!Ref ProjectName]]
      Scheme: internet-facing
      IpAddressType: ipv4
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref PublicSubnets

  BackendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: !If
        - IsProd
        - LoadBalancerArn: !Ref LoadBalancer
          Protocol: HTTPS
          Port: 443
          DefaultActions:
            - Type: forward
              TargetGroupArn: !Ref BackendTargetGroup
          Certificates:
            - CertificateArn: !Ref SSLCertificate
          SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
        - LoadBalancerArn: 
            Fn::ImportValue: !Join ["-", [!Ref ProjectName, loadbalancer]]
          Protocol: HTTP
          Port: 80
          DefaultActions:
            - Type: forward
              TargetGroupArn: !Ref BackendTargetGroup

  APIListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref APITargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Join [".", [ecommerce, !Ref Domain]]
      ListenerArn: !Ref BackendListener
      Priority: 1

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ["-", [!Ref ProjectName, !Ref EnvType, backend]]
      TargetType: ip
      Protocol: HTTP
      Port: 8080
      VpcId: !Ref VPC
      HealthCheckPath: /api/healthcheck
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 20
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "60"

  APITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ["-", [!Ref ProjectName, !Ref EnvType, api]]
      TargetType: ip
      Protocol: HTTP
      Port: 3000
      VpcId: !Ref VPC
      HealthCheckPath: /api/healthcheck
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 20
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "60"

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ["-", [!Ref ProjectName, !Ref EnvType, cluster]]

  TaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!Ref ProjectName, !Ref EnvType, task]]
      GroupDescription: !Sub "SecurityGroup for ${ProjectName}-${EnvType} Task"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref ProjectName, !Ref EnvType, task]]

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancer
    Properties:
      ServiceName: !Join ["-", [!Ref ProjectName, !Ref EnvType, service]]
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: !If [IsProd, 2, 1]
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref PublicSubnets
          SecurityGroups:
            - !Ref TaskSecurityGroup
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: !Join ["-", [!Ref ProjectName, backend]]
          ContainerPort: 8080
          TargetGroupArn: !Ref BackendTargetGroup
        - ContainerName: !Join ["-", [!Ref ProjectName, api]]
          ContainerPort: 3000
          TargetGroupArn: !Ref APITargetGroup

  UpdateServicePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join ["-", [!Ref ProjectName, update, service]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - ecs:UpdateService
            Resource:
              - !Ref Service
      Groups:
        - !Ref OperatorsGroup

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref ProjectName, !Ref EnvType, autoscale]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !If [IsProd, 2, 1]
      MaxCapacity: !If [IsProd, 6, 3]
      ResourceId: !Join ["/", [service, !Ref Cluster, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      ScalingTargetId: !Ref AutoScalingTarget
      PolicyType: TargetTrackingScaling
      PolicyName: !Join ["-", [!Ref ProjectName, !Ref EnvType, autoscaling]]
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 180
        ScaleOutCooldown: 60
        TargetValue: 60

Outputs:
  Endpoint:
    Description: Endpoint
    Condition: IsProd
    Value: !GetAtt LoadBalancer.DNSName
    Export: 
      Name: !Join ["-", [!Ref ProjectName, loadbalancer, endpoint]]

  LoadBalancer:
    Value: !Ref LoadBalancer
    Condition: IsProd
    Export: 
      Name: !Join ["-", [!Ref ProjectName, loadbalancer]]