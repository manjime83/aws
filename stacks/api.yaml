AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ProjectName:
    Type: String
  VpcId:
    Type: AWS::EC2::VPC::Id
  EnvType:
    Type: String
  Domain:
    Type: String
  OperatorsGroup:
    Type: String
  SSLCertificate:
    Type: String
  LoadBalancer:
    Type: String
  LoadBalancerSecurityGroup:
    Type: String
  ECSCluster:
    Type: String
  MinContainers:
    Type: Number
  MaxContainers:
    Type: Number

Conditions:
  IsProd: !Equals [!Ref EnvType, prod]
  IsTest: !Equals [!Ref EnvType, test]

Resources:
  APIRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${ProjectName}-${EnvType}/api"
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "imageCountMoreThan",
                  "countNumber": 5,
                  "tagStatus": "untagged"
                },
                "description": "Keep only 5 untagged image, expire all others",
                "rulePriority": 1
              }
            ]
          }

  EcommerceRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${ProjectName}-${EnvType}/ecommerce"
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "imageCountMoreThan",
                  "countNumber": 5,
                  "tagStatus": "untagged"
                },
                "description": "Keep only 5 untagged image, expire all others",
                "rulePriority": 1
              }
            ]
          }

  TccRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${ProjectName}-${EnvType}/tcc"
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "imageCountMoreThan",
                  "countNumber": 5,
                  "tagStatus": "untagged"
                },
                "description": "Keep only 5 untagged image, expire all others",
                "rulePriority": 1
              }
            ]
          }

  PutImagePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join ["-", [!Ref ProjectName, put, image]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - ecr:GetAuthorizationToken
            Resource:
              - "*"
          - Effect: "Allow"
            Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
            Resource:
              - !GetAtt APIRepository.Arn
              - !GetAtt EcommerceRepository.Arn
              - !GetAtt TccRepository.Arn
      Groups:
        - !Ref OperatorsGroup

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ProjectName}-${EnvType}"
      RetentionInDays: 7

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref ProjectName, !Ref EnvType, execution]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Effect: Allow
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref ProjectName, !Ref EnvType, task]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Effect: Allow
            Action: sts:AssumeRole

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ["-", [!Ref ProjectName, !Ref EnvType, task, definition]]
      RequiresCompatibilities:
        - EC2
      TaskRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: bridge
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Join ["-", [!Ref ProjectName, api]]
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${APIRepository}:latest"
          MemoryReservation: 384
          PortMappings:
            - ContainerPort: 8080
          Environment:
            - Name: NODE_ENV
              Value: !If [IsProd, production, !Ref EnvType]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: api
        - Name: !Join ["-", [!Ref ProjectName, ecommerce]]
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcommerceRepository}:latest"
          MemoryReservation: 128
          DependsOn:
            - ContainerName: !Join ["-", [!Ref ProjectName, api]]
              Condition: START
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: !If [IsProd, production, !Ref EnvType]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecommerce
        - Name: !Join ["-", [!Ref ProjectName, tcc]]
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${TccRepository}:latest"
          MemoryReservation: 128
          DependsOn:
            - ContainerName: !Join ["-", [!Ref ProjectName, api]]
              Condition: START
          PortMappings:
            - ContainerPort: 4000
          Environment:
            - Name: NODE_ENV
              Value: !If [IsProd, production, !Ref EnvType]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: tcc

  APITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ["-", [!Ref ProjectName, !Ref EnvType, api]]
      TargetType: instance
      Protocol: HTTP
      Port: 8080
      VpcId: !Ref VpcId
      HealthCheckPath: /api/healthcheck
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 20
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "60"

  EcommerceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ["-", [!Ref ProjectName, !Ref EnvType, ecommerce]]
      TargetType: instance
      Protocol: HTTP
      Port: 3000
      VpcId: !Ref VpcId
      HealthCheckPath: /api/healthcheck
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 20
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "60"

  TccTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ["-", [!Ref ProjectName, !Ref EnvType, tcc]]
      TargetType: instance
      Protocol: HTTP
      Port: 4000
      VpcId: !Ref VpcId
      HealthCheckPath: /api/healthcheck
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 20
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "60"

  DefaultListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: IsProd
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTPS
      Port: 443
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: "404"
      Certificates:
        - CertificateArn: !Ref SSLCertificate
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01

  ListenerCertificate:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Condition: IsTest
    Properties:
      ListenerArn:
        Fn::ImportValue: !Join ["-", [!Ref ProjectName, loadbalancer, listener]]
      Certificates:
        - CertificateArn: !Ref SSLCertificate

  APIListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref APITargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Join [".", [api, !Ref Domain]]
      ListenerArn: !If
        - IsProd
        - !Ref DefaultListener
        - Fn::ImportValue: !Join ["-", [!Ref ProjectName, loadbalancer, listener]]
      Priority: !If [IsProd, 10, 20]

  APITempListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: IsProd
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref APITargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Join [".", [aws-api, !Ref Domain]]
      ListenerArn: !If
        - IsProd
        - !Ref DefaultListener
        - Fn::ImportValue: !Join ["-", [!Ref ProjectName, loadbalancer, listener]]
      Priority: !If [IsProd, 13, 23]

  EcommerceListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref EcommerceTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Join [".", [ecommerce, !Ref Domain]]
      ListenerArn: !If
        - IsProd
        - !Ref DefaultListener
        - Fn::ImportValue: !Join ["-", [!Ref ProjectName, loadbalancer, listener]]
      Priority: !If [IsProd, 11, 21]

  TccListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TccTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Join [".", [tcc, !Ref Domain]]
      ListenerArn: !If
        - IsProd
        - !Ref DefaultListener
        - Fn::ImportValue: !Join ["-", [!Ref ProjectName, loadbalancer, listener]]
      Priority: !If [IsProd, 12, 22]

  TaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!Ref ProjectName, !Ref EnvType, task]]
      GroupDescription: !Sub "SecurityGroup for ${ProjectName}-${EnvType} Task"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 4000
          ToPort: 4000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref ProjectName, !Ref EnvType, task]]

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - APIListenerRule
      - EcommerceListenerRule
      - TccListenerRule
    Properties:
      ServiceName: !Join ["-", [!Ref ProjectName, !Ref EnvType, service]]
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 50
        MaximumPercent: 200
      DesiredCount: !Ref MinContainers
      LaunchType: EC2
      HealthCheckGracePeriodSeconds: 20
      LoadBalancers:
        - ContainerName: !Join ["-", [!Ref ProjectName, api]]
          ContainerPort: 8080
          TargetGroupArn: !Ref APITargetGroup
        - ContainerName: !Join ["-", [!Ref ProjectName, ecommerce]]
          ContainerPort: 3000
          TargetGroupArn: !Ref EcommerceTargetGroup
        - ContainerName: !Join ["-", [!Ref ProjectName, tcc]]
          ContainerPort: 4000
          TargetGroupArn: !Ref TccTargetGroup

  UpdateServicePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join ["-", [!Ref ProjectName, update, service]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - ecs:UpdateService
            Resource:
              - !Ref Service
      Groups:
        - !Ref OperatorsGroup

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref ProjectName, !Ref EnvType, autoscale]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ["/", [service, !Ref ECSCluster, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      ScalingTargetId: !Ref AutoScalingTarget
      PolicyType: TargetTrackingScaling
      PolicyName: !Join ["-", [!Ref ProjectName, !Ref EnvType, autoscaling]]
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 180
        ScaleOutCooldown: 60
        TargetValue: 60

  EcsReadOnlyPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join ["-", [!Ref ProjectName, ecs, read, only]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ecs:List*"
              - "ecs:Describe*"
              - "application-autoscaling:Describe*"
            Resource:
              - "*"
      Groups:
        - !Ref OperatorsGroup

Outputs:
  DefaultListener:
    Condition: IsProd
    Value: !Ref DefaultListener
    Export:
      Name: !Join ["-", [!Ref ProjectName, loadbalancer, listener]]
